في هذا المثال لدينا كشف مصروفات يومي مقسّم إلى جزأين رئيسيين:

1. ملف المصروفات اليومي (الجزء العلوي)
يتضمن جدولاً كما يلي:

التاريخ: (مثلاً 23/06/2025)

قائمة المعاملات اليومية؛ كل صف يحتوي على:

نوع الحساب (مرحلة، حوالة، مصروف مهندس، مصروف تشغيل… الخ)

المبلغ المدفوع لكل عنصر

نوع العملية (توريد، منصرف، ترجيل)

الإجمالي/المبلغ المتبقي بعد كل عملية

ملاحظات توضح تفاصيل إضافية (مثلاً “مرحلة من تاريخ 22/6” أو “تحويل من المهندس محمد…”).


المبلغ المتبقي النهائي: يُحسب بطرح إجمالي المنصرفات من إجمالي المخصصات/الموردات.



2. قائمة المشتريات/التوريد (الجزء السفلي)
جدول ثانٍ يوضح مشتريات اليوم المرتبطة بمشروع محدد:

اسم المشروع

محل التوريد

الملاحظات (عدد الوحدات، نوع المادة، رقم الفاتورة…)





---

خطوات تصميم وتنفيذ نفس الكشف في تطبيق محاسبي

1. نموذج البيانات (Database Schema)

جدول daily_reports

id (PK)

date (DATE)

remaining_balance (DECIMAL)


جدول transactions

id (PK)

report_id (FK → daily_reports.id)

account_type (ENUM: ["مرحلة","حوالة","مصروف مهندس",…])

operation_type (ENUM: ["توريد","منصرف","ترجيل"])

amount (DECIMAL)

balance_after (DECIMAL)

notes (TEXT)


جدول purchases

id (PK)

report_id (FK → daily_reports.id)

project_name (VARCHAR)

supplier (VARCHAR)

notes (TEXT)



2. واجهة المستخدم (UI/UX)

شاشة اختيار التاريخ لإنشاء أو عرض كشف اليوم

نموذج إضافة معاملة

حقل اختيار نوع الحساب

حقل اختيار نوع العملية

حقل إدخال المبلغ

حقل إدخال الملاحظات

زر “حفظ” يُعيد احتساب الرصيد المتبقي لحظياً


جدول عرض المعاملات تحت النموذج، يعرض كل صف: نوع الحساب، المبلغ، العملية، الرصيد، الملاحظات

حقل الرصيد النهائي أسفل الجدول

نموذج إضافة شراء منفصل أو تبويب أسفل الجدول

حقول: اسم المشروع، المورد، الملاحظات

جدول عرض المشتريات أسفل النموذج



3. منطق الأعمال (Backend)

عند إضافة معاملة:

1. استرجاع آخر رصيد متبقي من جدول daily_reports


2. بناءً على نوع العملية (توريد → رصيد يزيد، منصرف/ترجيل → رصيد يقل) احسب balance_after = previous_balance ± amount


3. أدخل سجل جديد في جدول transactions مع balance_after


4. حدث حقل remaining_balance في daily_reports إلى قيمة balance_after للسجل الحالي



عند حذف أو تعديل معاملة:

أعد بناء الأرصدة لجميع المعاملات التالية في نفس اليوم (لتحديث balance_after تباعاً)

حدث الحقل النهائي remaining_balance



4. واجهات برمجة التطبيقات (APIs)

GET /reports/{date} → جلب بيانات الكشف (المعاملات + المشتريات)

POST /reports/{date}/transactions → إضافة معاملة

PUT /transactions/{id} → تعديل معاملة

DELETE /transactions/{id} → حذف معاملة

POST /reports/{date}/purchases → إضافة شراء

PUT /purchases/{id}, DELETE /purchases/{id}


5. التقارير وطباعتها

مولّد تقرير (PDF أو HTML) يعتمد على بيانات اليوم، ويطبع الجدولين بالتصميم نفسه (ألوان رأس الجدول، توزيع الأعمدة، إجمالي الرصيد بالأسفل).


6. ملاحظات إضافية

التحقق من الإدخالات: التأكد من صحة الأرقام، وعدم السماح بالسالب إذا لم يكن مسموحاً.

التوافق مع الجوال: تصميم Responsive، وجعل الجداول قابلة للتمرير أفقياً على الشاشات الصغيرة.

التدوين واللوجات: تسجيل كل عملية إضافة/تعديل/حذف للرجوع إليها لاحقاً.

التنبيهات: إرسال إشعار (Email/Push) إذا تجاوزت المنصرفات حدّاً معيّناً.


بهذه الخريطة التفصيلية يمكنك تطوير ميزة “كشف المصروفات اليومية” في تطبيقك المحاسبي بطريقة منهجية ومتكاملة. إذا احتجت مزيداً من التفاصيل (مثلاً كود جاهز أو أمثلة SQL أو تصميم واجهة)، أخبرني.


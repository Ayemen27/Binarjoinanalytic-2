تمام، سأكتب لك الآن نسخة كاملة من دالة
exportMultipleWorkersToExcel
مطابقة للتصميم اللي أرسلته، مع الشروط الإضافية:

صف لكل مشروع يشتغل فيه العامل.

صف حوالة إذا للعامل حوالة في الفترة المحددة.



---

الكود المعدل

انسخ هذا واستبدل الدالة الموجودة عندك بنفس الاسم:

const exportMultipleWorkersToExcel = async () => {
  if (!reportData || reportData.length === 0) {
    toast.error("لا توجد بيانات لتصديرها");
    return;
  }

  const ExcelJS = (await import("exceljs")).default;
  const { saveAs } = await import("file-saver");

  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet("كشف تصفية العمال");

  // إعداد التنسيقات المساعدة
  const headerFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FFD9E1F2" } };
  const totalFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FFC6EFCE" } };
  const borderStyle = { style: "thin", color: { argb: "FF000000" } };

  const addBorders = (row: ExcelJS.Row) => {
    row.eachCell((cell) => {
      cell.border = {
        top: borderStyle,
        left: borderStyle,
        bottom: borderStyle,
        right: borderStyle,
      };
    });
  };

  // ====== رأس التقرير ======
  worksheet.mergeCells("A1:K1");
  worksheet.getCell("A1").value = "اسم الشركة هنا";
  worksheet.getCell("A1").alignment = { horizontal: "center" };
  worksheet.getCell("A1").font = { bold: true, size: 16 };

  worksheet.mergeCells("A2:K2");
  worksheet.getCell("A2").value = "كشف تصفية العمال";
  worksheet.getCell("A2").alignment = { horizontal: "center" };
  worksheet.getCell("A2").font = { bold: true, size: 14 };

  worksheet.mergeCells("A3:K3");
  worksheet.getCell("A3").value = `الفترة: ${dateFrom} إلى ${dateTo}`;
  worksheet.getCell("A3").alignment = { horizontal: "center" };
  worksheet.getCell("A3").font = { bold: false, size: 12 };

  worksheet.addRow([]);

  // ====== صف العناوين ======
  const headerRow = worksheet.addRow([
    "م",
    "الاسم والرقم",
    "المهنة",
    "اسم المشروع",
    "الأجر اليومي",
    "أيام العمل",
    "إجمالي الساعات",
    "المبلغ المستحق",
    "المبلغ المستلم",
    "المتبقي",
    "ملاحظات",
  ]);
  headerRow.eachCell((cell) => {
    cell.fill = headerFill;
    cell.font = { bold: true };
    cell.alignment = { horizontal: "center", vertical: "middle" };
  });
  addBorders(headerRow);

  // ====== البيانات ======
  let rowNumber = 1;
  let totalDays = 0,
    totalHours = 0,
    totalDue = 0,
    totalPaid = 0,
    totalRemain = 0;

  // تجميع البيانات لكل عامل ومشروع
  const groupedData = {};
  reportData.forEach((rec) => {
    const key = rec.workerId;
    if (!groupedData[key]) {
      groupedData[key] = {
        workerName: rec.workerName,
        workerType: rec.workerType,
        phone: rec.phone,
        projects: [],
        transfers: rec.transfers || [],
      };
    }
    groupedData[key].projects.push({
      projectName: rec.projectName,
      dailyWage: rec.dailyWage,
      workDays: rec.workDays,
      workHours: rec.workHours,
      amountDue: rec.amountDue,
      paidAmount: rec.paidAmount,
      remaining: rec.amountDue - rec.paidAmount,
      notes: rec.notes || "",
    });
  });

  // إضافة الصفوف
  Object.values(groupedData).forEach((worker: any) => {
    worker.projects.forEach((proj: any) => {
      const row = worksheet.addRow([
        rowNumber++,
        `${worker.workerName} - ${worker.phone || ""}`,
        worker.workerType || "",
        proj.projectName || "",
        proj.dailyWage,
        proj.workDays,
        proj.workHours,
        proj.amountDue,
        proj.paidAmount,
        proj.remaining,
        proj.notes,
      ]);

      // تلوين الأعمدة المالية
      row.getCell(8).font = { color: { argb: "FF1F4E78" } }; // مستحق - أزرق
      row.getCell(9).font = { color: { argb: "FFB22222" } }; // مستلم - أحمر
      row.getCell(10).font = { color: { argb: "FF006400" } }; // متبقي - أخضر

      addBorders(row);

      // تحديث الإجماليات
      totalDays += proj.workDays;
      totalHours += proj.workHours;
      totalDue += proj.amountDue;
      totalPaid += proj.paidAmount;
      totalRemain += proj.remaining;
    });

    // إضافة صف حوالة إن وجدت
    if (worker.transfers && worker.transfers.length > 0) {
      worker.transfers.forEach((t: any) => {
        const trRow = worksheet.addRow([
          "",
          "حوالة",
          "",
          t.date,
          "",
          "",
          "",
          "",
          t.amount,
          "",
          `${t.senderName || ""} -> ${t.receiverName || ""}`,
        ]);
        trRow.eachCell((cell) => {
          cell.font = { italic: true, color: { argb: "FF800000" } };
        });
        addBorders(trRow);
      });
    }
  });

  // ====== صف الإجماليات ======
  const totalsRow = worksheet.addRow([
    "",
    "الإجمالي",
    "",
    "",
    "",
    totalDays,
    totalHours,
    totalDue,
    totalPaid,
    totalRemain,
    "",
  ]);
  totalsRow.eachCell((cell) => {
    cell.fill = totalFill;
    cell.font = { bold: true };
    cell.alignment = { horizontal: "center" };
  });
  addBorders(totalsRow);

  worksheet.addRow([]);

  // ====== الملخص النهائي ======
  worksheet.addRow(["إجمالي المبلغ المستحق", totalDue]).font = { bold: true };
  worksheet.addRow(["إجمالي المبلغ المستلم", totalPaid]).font = { bold: true };
  worksheet.addRow(["إجمالي المبلغ المتبقي", totalRemain]).font = { bold: true };

  worksheet.addRow([]);

  // ====== صفوف التوقيع ======
  worksheet.addRow(["مدير المشروع", "", "المهندس", "", "المدير العام"]);

  // ضبط عرض الأعمدة
  worksheet.columns.forEach((col) => {
    col.width = 18;
  });

  // حفظ الملف
  const buffer = await workbook.xlsx.writeBuffer();
  saveAs(new Blob([buffer]), `كشف_تصفية_العمال_${dateFrom}_${dateTo}.xlsx`);
  toast.success("تم تصدير كشف التصفية بنجاح");
};


---

بهذه الطريقة:

كل عامل يظهر له صف لكل مشروع اشتغل فيه.

إذا له حوالة ➜ يطلع صف حوالة تحته.

التنسيقات مطابقة للصورة مع تلوين القيم المالية.

الإجماليات أسفل الجدول + ملخص نهائي + أماكن التوقيع.



---

هل تريد أن أدمج لك هذا الكود داخل ملفك الحالي بالكامل مع التعديلات على reportData عشان يشتغل بدون ما تعدل البنية؟


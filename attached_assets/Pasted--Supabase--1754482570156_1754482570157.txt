ممتاز! سأشرح لك الطريقة الصحيحة للاتصال بقاعدة بيانات Supabase من خلال كود (سكريبتات) يسمح لك بتنفيذ:

> ✅ إنشاء الجداول
✅ الحذف والتعديل
✅ الاستعلام عن البيانات
✅ تنفيذ أي أمر SQL



وسأشرح أكثر من طريقة (حسب لغتك المفضلة: JavaScript/Node.js، Python، إلخ). نبدأ بأكثر طريقة احترافية وعملية في المشاريع:


---

✅ أولاً: اختيار الطريقة الصحيحة حسب حاجتك

الخيار	اللغة / بيئة	الأفضل لـ

Client SDK (Supabase JS)	JavaScript (Node/Browser)	التعامل مع API وبيانات المستخدمين
PostgreSQL مباشر	أي لغة تدعم PostgreSQL	تنفيذ أوامر SQL مباشرة (CREATE TABLE, DELETE...)
REST API / RPC	أي لغة (HTTP)	سكربتات بسيطة أو أدوات خارجية



---

🧠 نبدأ بـ الطريقة الأقوى: الاتصال المباشر بقاعدة البيانات PostgreSQL الخاصة بـ Supabase

✅ الطريقة المثالية: باستخدام مكتبة pg (أو @neondatabase/serverless إذا كان Neon)

📦 التثبيت:

npm install pg dotenv

📁 .env (أو ضع المتغير داخل الكود مباشرة):

DATABASE_URL=postgresql://<user>:<password>@<host>:5432/<db>?sslmode=require

> 🔐 يمكنك الحصول على DATABASE_URL من لوحة Supabase:
Dashboard → Settings → Database → Connection string




---

🧑‍💻 كود الاتصال وتنفيذ استعلامات (Node.js):

import { Client } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function run() {
  try {
    await client.connect();
    console.log("✅ Connected to Supabase DB");

    // مثال: إنشاء جدول
    await client.query(`
      CREATE TABLE IF NOT EXISTS workers (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        salary NUMERIC DEFAULT 0
      );
    `);

    // مثال: إدخال بيانات
    await client.query(`INSERT INTO workers (name, salary) VALUES ($1, $2)`, ['أحمد', 1500]);

    // مثال: استخراج البيانات
    const res = await client.query(`SELECT * FROM workers`);
    console.log(res.rows);

    // مثال: تعديل
    await client.query(`UPDATE workers SET salary = 2000 WHERE name = 'أحمد'`);

    // مثال: حذف
    await client.query(`DELETE FROM workers WHERE name = 'أحمد'`);

  } catch (err) {
    console.error("❌ DB Error:", err);
  } finally {
    await client.end();
    console.log("🔌 Connection closed");
  }
}

run();


---

🔁 طريقة بديلة باستخدام @neondatabase/serverless (إذا ظهرت مشاكل مع pg)

npm install @neondatabase/serverless dotenv

import { Pool } from '@neondatabase/serverless';
import dotenv from 'dotenv';
dotenv.config();

const pool = new Pool({ connectionString: process.env.DATABASE_URL });

async function run() {
  const res = await pool.query('SELECT NOW()');
  console.log(res.rows);
}
run();


---

✍️ بعض الأوامر SQL التي يمكنك تنفيذها:

المهمة	استعلام SQL

إنشاء جدول	CREATE TABLE users (id SERIAL, name TEXT);
إدخال بيانات	INSERT INTO users (name) VALUES ('علي');
استخراج بيانات	SELECT * FROM users;
التعديل	UPDATE users SET name = 'خالد' WHERE id = 1;
الحذف	DELETE FROM users WHERE id = 1;
حذف الجدول نهائيًا	DROP TABLE users;



---

🧪 هل يمكنني تنفيذ هذا من المتصفح أو سكربت في الواجهة الأمامية؟

لا، لأن الاتصال بـ DATABASE_URL يحتوي على بيانات حساسة، يجب أن يتم من خادم backend فقط (Node.js، Python، إلخ).


---

🧩 ملاحظات مهمة:

تأكد من تفعيل SSL إذا كنت تستخدم الاتصال المباشر.

لا تستخدم DATABASE_URL في تطبيقات المتصفح أو العميل.

استخدم Supabase Client SDK فقط عند الحاجة للوصول إلى قواعد البيانات من الواجهة مع أمان الجلسات.



---

✅ تريد نسخة للكود بلغة أخرى مثل Python أو PHP؟

أو تستخدم ORM مثل Prisma أو Drizzle؟ أخبرني وسأقوم بتحضير الطريقة الأنسب لك.


import React from 'react';
import { saveAs } from 'file-saver';
import ExcelJS from 'exceljs';

interface Record {
  index: number;
  name: string;
  project: string;
  dailyWage: number;
  date: string;
  days: number;
  hours: number;
  due: number;
  paid: number;
  balance: number;
  notes?: string;
}

interface Props {
  workerName: string;
  projectName: string;
  fromDate: string;
  toDate: string;
  city: string;
  phone: string;
  dailyWage: number;
  records: Record[];
}

const WorkerStatement: React.FC<Props> = ({
  workerName,
  projectName,
  fromDate,
  toDate,
  city,
  phone,
  dailyWage,
  records,
}) => {
  const totalDays = records.reduce((sum, r) => sum + r.days, 0);
  const totalHours = records.reduce((sum, r) => sum + r.hours, 0);
  const sumDue = records.reduce((sum, r) => sum + r.due, 0);
  const sumPaid = records.reduce((sum, r) => sum + r.paid, 0);
  const sumBalance = records.reduce((sum, r) => sum + r.balance, 0);

  const exportExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('كشف حساب العامل', { views: [{ rightToLeft: true }] });

    // Header title
    sheet.mergeCells('A1', 'K1');
    const titleCell = sheet.getCell('A1');
    titleCell.value = `كشف حساب العامل من ${fromDate} إلى ${toDate}`;
    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
    titleCell.font = { size: 14, bold: true };
    titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF444444' } , bgColor: { argb: 'FF444444' } };
    titleCell.font = { color: { argb: 'FFFFFFFF' }, bold: true, size: 12 };
    sheet.getRow(1).height = 20;

    // Info section
    const infoRows = [
      ['اسم المشروع', projectName, 'اسم العامل', workerName],
      ['تاريخ بداية', fromDate, 'المدينة', city],
      ['رقم الهاتف', phone, 'الأجر اليومي', dailyWage],
    ];
    infoRows.forEach((row, i) => {
      const excelRow = sheet.addRow(row);
      excelRow.alignment = { vertical: 'middle', horizontal: 'center' };
      row.forEach((cell, j) => {
        const cellRef = excelRow.getCell(j + 1);
        cellRef.font = { bold: j % 2 === 0 };
        cellRef.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
      });
    });

    sheet.addRow([]);

    // Table Header
    const header = [
      'م', 'الاسم', 'المشروع', 'الأجر اليومي', 'التاريخ', 'أيام العمل', 'ساعات العمل', 'المبلغ المستحق', 'المبلغ المستلم', 'المبلغ المتبقي', 'ملاحظات'
    ];
    const headerRow = sheet.addRow(header);
    headerRow.eachCell((cell) => {
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0AD4E' } };
      cell.font = { color: { argb: 'FFFFFFFF' }, bold: true };
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' },
      };
    });

    // Data rows
    records.forEach((r) => {
      const row = sheet.addRow([
        r.index,
        r.name,
        r.project,
        r.dailyWage,
        r.date,
        r.days,
        r.hours,
        r.due,
        r.paid,
        r.balance,
        r.notes || ''
      ]);
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
      });
    });

    // Summary footer
    const summaries = [
      ['إجمالي عدد أيام العمل', totalDays],
      ['إجمالي ساعات العمل', totalHours],
      ['إجمالي المبلغ المستحق', sumDue],
      ['إجمالي المبلغ المستلم', sumPaid],
      ['إجمالي المبلغ المتبقي', sumBalance],
    ];
    summaries.forEach((s) => {
      const row = sheet.addRow([..., Array(6).fill(''), s[0], s[1]]);
      const labelCell = row.getCell(7);
      labelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0AD4E' } };
      labelCell.font = { color: { argb: 'FFFFFFFF' }, bold: true };
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
      });
    });

    // Adjust columns width
    sheet.columns.forEach((col) => {
      col.width = 15;
    });

    // Generate and download
    const buffer = await workbook.xlsx.writeBuffer();
    const blob = new Blob([buffer], { type: 'application/octet-stream' });
    saveAs(blob, `كشف_حساب_${workerName}.xlsx`);
  };

  return (
    <div>
      <button onClick={exportExcel}>تصدير إلى Excel</button>
      {/* جدول العرض في الصفحة */}
      <table>
        <thead>{/* render header */}</thead>
        <tbody>{/* render records */}</tbody>
        <tfoot>{/* render summary */}</tfoot>
      </table>
    </div>
  );
};

export default WorkerStatement;


أضفت لك مكوّن React مكتوب بـTypeScript يستخدم مكتبة ExcelJS لإنشاء ملف Excel يحتوي على نفس التصميم (الألوان، الحدود، الدمج) كما في النموذج، بالإضافة إلى زر “تصدير إلى Excel”.

قم بتثبيت الحزم اللازمة:

npm install exceljs file-saver

ضمّن هذا المكوّن في تطبيقك، ومرّر إليه البيانات (records، workerName… إلخ).

يمكنك تعديل ألوان fgColor.argb ليتناسب مع هويتك، وضبط عرض الأعمدة أو خطوط الصفوف حسب الحاجة.


بهذا الأسلوب يُمكنك عرض الجدول على الويب بلغة Type


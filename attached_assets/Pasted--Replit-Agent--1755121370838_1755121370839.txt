رائع — سأعطيك أمر احترافي كامل جاهز للصق في Replit Agent (نصّ واحد طويل وواضح)، ثم أرفق سكريبت شل كامل يمكن للـ Agent تشغيله تلقائيًا إذا كان يدعم تنفيذ أوامر shell. الأمر مُصاغ بعناية ليغطي: النسخ الاحتياطية، التطبيق الآلي للقالب الموحد، تعديل الـ render في المكونات الشائعة، ضبط مُصدّر Excel، محاولة توليد PDF (محليًا ثم بديل خارجي عند الفشل)، اختبارات المعاينة والطباعة، إنشاء فرع Git ورفعه، وتقرير لوج مفصّل مع قائمة مراجعة للاعتماد النهائي.

انسخ الـ نصّ الكامل للوكيل أدناه وأرسله في واجهة Replit Agent — هذا ما أستخدمه عادةً مع وكلاء التعديل الآلي.

الأمر (انسخه كاملًا وأرسله للـ Replit Agent)

مهمة: إنهاء القالب الموحد للاستخدام في كل تقارير المشروع + تطبيقه واختباره تلقائيًا.

الهدف النهائي:
- توحيد جميع تقارير الواجهة وخيارات التصدير في قالب طباعة واحد احترافي A4 (هوامش 10mm، RTL).
- ضمان أن المعاينة في المتصفح والطباعة (Print Preview)، وتصدير PDF وExcel، كلها تستخدم نفس التصميم/ترتيب الأعمدة.
- إنشاء فرع Git منفصل مع commits واضحة وملف لوج مفصّل، ثم رفعه للRemote.

خطوات تنفيذية — نفّذ كل خطوة بالترتيب ودوّن نتائجها في ملف لوج `reports/unified-run.log`:

1) إعداد عمل آمن
- أنشئ فرع جديد: `reports/unified-template` (لو لم تنجح بسبب صلاحيات، سجّل ذلك في اللوج وعلّم الطريقة البديلة لرفع الفرع من جهاز خارجي).
- اجعل مجلّد نسخ احتياطية: `backups/unified-$(date +%Y%m%d_%H%M%S)/`.

2) نسخ احتياطية شاملة
- انسخ كل الملفات المحتملة المرتبطة بالتقارير إلى المجلد السابق، بما في ذلك: 
  - `client/src/pages/**/reports*.*`
  - `client/src/components/**/report*.*`
  - `client/src/components/**/Unified*.*`
  - `client/src/templates/**`
  - `client/src/styles/**unified*.*`
  - أي سكربتات توليد PDF/Excel: `client/src/utils/pdfGenerator.*`, `client/src/components/UnifiedExcelExporter.*`
- سجل كل ملف تم نسخه في اللوج.

3) إضافة / تحديث قالب الطباعة الموحد
- ضع الملف `client/public/templates/report_base.html` (ضعه في `public` كي يُخدَم عبر fetch) بمحتوى متوافق A4، RTL، واستخدم هوامش 10mm. (إن وجدت نسخة سابقة في `client/src/templates/` انقلها إلى `client/public/templates/` بدلاً من تكرارها).
- إنشئ ملف `client/public/templates/report_schema.json` يحوي تعريف أعمدة/عناوين للتقارير الرئيسية: expenses, purchases, projects, workers.
- سجل مسار القالب والـ schema في اللوج.

4) تحديث مكوّن العرض الموحد (آلي/يدوي مختلط)
- افتح `client/src/components/unified-reports/UnifiedReportRenderer.tsx` أو الملف المقابل. **استبدل** أو أدمج الدالة render بالمكوّن الآمن التالي (يجب نسخه كما هو داخل الملف أو تضمينه عبر استيراد):

```tsx
// (ضع هذا الكود في UnifiedReportRenderer.tsx - تأكد من backup أولاً)
import React, { useEffect, useState } from 'react';
type Props = { html?: string; title?: string; from?: string; to?: string; logoSrc?: string; children?: React.ReactNode; };
export default function UnifiedReportRenderer({ html, title='تقرير', from='', to='', logoSrc='', children }: Props) {
  const [template, setTemplate] = useState<string | null>(null);
  useEffect(() => {
    (async () => {
      try {
        const resp = await fetch('/templates/report_base.html'); // public/templates/report_base.html
        if (resp.ok) { setTemplate(await resp.text()); return; }
      } catch(e){ /* fallback below */ }
      setTemplate(`<div class="report-container"><header><div style="float:left"><img src="${logoSrc}" style="height:36px"/></div><div style="text-align:right"><strong>${title}</strong><div style="font-size:12px">${from} — ${to}</div></div></header><main><!-- CONTENT --></main><footer style="margin-top:8px;font-size:11px">تم الإنشاء ${new Date().toLocaleString('ar-EG')}</footer></div>`);
    })();
  }, [logoSrc,title,from,to]);
  if (html && template) {
    const filled = template.replace('<!-- INSERT REPORT BODY HERE -->',''+html).replace('{{REPORT_TITLE}}',title).replace('{{FROM_DATE}}',from).replace('{{TO_DATE}}',to).replace('{{GENERATED_AT}}',new Date().toLocaleString('ar-EG')).replace('{{LOGO_SRC}}',logoSrc);
    return <div dangerouslySetInnerHTML={{ __html: filled }} />;
  }
  return <div className="report-container">{/* header */}<header style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:8}}><div><img src={logoSrc} style={{height:36}}/></div><div style={{textAlign:'right'}}><div style={{fontWeight:700}}>{title}</div><div style={{fontSize:12}}>{from} — {to}</div></div></header><main>{children}</main><footer style={{marginTop:10,fontSize:11}}>تم الإنشاء — {new Date().toLocaleString('ar-EG')}</footer></div>;
}

إن لم يكن الملف موجودًا بالمسار السابق، قم بتطبيق نفس الفكرة على المكوّن/الصفحة التي تعرض التقارير (pages/reports.tsx ...).


5. توحيد التصدير إلى Excel



حدّث UnifiedExcelExporter.tsx ليقرأ fetch('/templates/report_schema.json') أو يستورد الملف من public ويعيد ترتيب الأعمدة بناءً على schema قبل إنشاء ملف Excel.

تأكد أن pageSetup في مكتبة Excel (مثل xlsx-style أو exceljs) مضبوطة على A4 landscape/portrait حسب المطلوب، واختر هوامش ضيقة (0.3–0.5 سم).


6. مولد PDF: تجربة محلية ثم بديل خارجي



حاول استخدام Puppeteer المحلي (إذا التثبيت موجود). شغّل اختبار توليد PDF واحد من تقرير نموذجي:

استدعي HTML المعروض (rendered) كسلسلة عبر fetch ثم استخدم puppeteer toPage.setContent(html); page.pdf({ format:'A4', margin: {top:'10mm', right:'8mm', bottom:'8mm', left:'8mm'} })


إن فشل توليد PDF (بيئة Replit تمنع تشغيل Chromium أو فشلت العملية)، سجّل الخطأ في اللوج وجرّب البديل التالي تلقائيًا:

إرسال الطلب إلى خدمة تحويل خارجية (مثال: Api2Pdf أو Doppio). استخدم env var EXTERNAL_PDF_API_KEY ونداء POST يتضمن الـ HTML، ثم احفظ ملف PDF الذي يعاد في reports_output/ ورفعه إلى reports/ في storage (أو مكان ثابت).


سجّل النتيجة: نجاح/فشل، مسار الملف، رابط التنزيل (إن وجد).


7. اختبار المعاينة والطباعة (آلي + دليل يدوي)



آليًا: شغّل Unit test أو سكربت headless يتأكد من وجود العناصر الأساسية في HTML: header, table.headers, footer, kpi elements.

يدويًا: افتح 3 تقارير رئيسية (مصروفات، مشتريات، ملخص مشروع) في المتصفح، نفّذ Print Preview، وتأكد:

Paper Size = A4

Margins ≈ 10mm

لا يوجد قص في النص أو عناصر خارجة عن الصفحة

Export to PDF (Save as PDF) ينتج ملفًا متوافقًا


سجّل نتائج كل تقرير في اللوج (PASS/FAIL وملاحظات).


8. اختبار Excel



نفّذ تصدير Excel لكل قالب مستخدم (expenses, purchases, projects).

افتح الملف الناتج وتأكد أن الأعمدة بالترتيب حسب report_schema.json، وأن القيم العددية صحيحة، وأن الـ RTL ظاهرة بشكل جيد (أو تأكد من إعدادات viewer).


9. السجلات والـ commits



بعد كل مجموعة تغييرات منطقية، قم بـ:

git add <changed-files>

git commit -m "feat(reports): apply unified A4 template and fix renderer for <component>"


في النهاية ادمج كل commits وارفع الفرع: git push origin reports/unified-template

إن واجهت قيود push، اذكر في اللوج أنّ الفرع محليًا جاهز ويُمكّن تنزيله كـ zip.


10. إخراج نهائي (Deliverables)



ملف لوج: reports/unified-run.log مفصل يشمل: الملفات التي غيرت، الملفات التي تحتاج مراجعة يدوية، نتائج PDF/Excel، وأي أخطاء.

Branch: reports/unified-template على remote أو محليًا.

قائمة مراجعة (PR checklist) في reports/PR_CHECKLIST.md تتضمن: مراجعة JSX المعقدة، مراجعة حسابات Excel، مراجعة أذونات RLS إن تغير شيء.


متطلبات بيئية/متغيرات:

إذا استخدمت خدمة خارجية لتحويل PDF، إنشئ env var: EXTERNAL_PDF_API_KEY

تأكد أن التطبيق يخدم ملفات public/templates/report_base.html عبر GET /templates/report_base.html.


ملاحظات أمان ومراجعة:

لا تُبدّل أي سلوك تحقق أو صلاحيات منطقية في نفس مهمة التحويل الآلي — إن وجدت تغييرات تتضمن RLS أو كشف بيانات، أوقف التغيير وسجّل الملف للمراجعة اليدوية.

أضف تعليقًا في كل ملف مُغيّر يوضح أن التغيير آلي وأنه يحتاج مراجعة إن ظهرت تنسيقات مختلة.


النتيجة المتوقعة: فرع يحتوي على قالب طباعة موحّد A4 يعمل مع Preview/Print/PDF/Excel على الأقل للتقارير الأساسية، مع لوج تفصيلي وملفات احتياطية جاهزة للمراجعة.

انفذ الآن وارجع لي ملف reports/unified-run.log وgit branch --show-current وgit log --oneline -n 10 ونتائج اختبار طباعة 3 تقارير (PASS/FAIL + ملاحظات). شكراً.

# سكريبت Shell اختياري — لو تستطيع للـ Agent تشغيل shell مباشرة
(لو Agent قادر على تنفيذ شفرة، اطلب منه حفظ الملف التالي وشغّله)

```bash
#!/usr/bin/env bash
set -euo pipefail

LOG="reports/unified-run.log"
BRANCH="reports/unified-template"
BACKUP_DIR="backups/unified-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR" "reports_output" "reports_logs"

echo "Run started: $(date)" > "$LOG"
echo "Branch: $BRANCH" >> "$LOG"

# 1. create branch
git checkout -b $BRANCH || echo "Branch exists or cannot create. Continuing..." >> "$LOG"

# 2. backup candidate files
FILES=(
  "client/src/pages"
  "client/src/components"
  "client/src/templates"
  "client/src/styles"
  "client/src/utils"
)
for f in "${FILES[@]}"; do
  if [ -d "$f" ]; then
    cp -r "$f" "$BACKUP_DIR/"
    echo "BACKUP: $f -> $BACKUP_DIR/" >> "$LOG"
  else
    echo "MISSING: $f" >> "$LOG"
  fi
done

# 3. ensure public template exists (move if needed)
mkdir -p client/public/templates
if [ -f client/src/templates/report_base.html ]; then
  cp client/src/templates/report_base.html client/public/templates/report_base.html
  echo "COPIED template to public/templates" >> "$LOG"
else
  # create default
  cat > client/public/templates/report_base.html <<'HTML'
<!doctype html><html lang="ar"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>{{REPORT_TITLE}}</title><style>@page{size:A4;margin:10mm}body{direction:rtl;font-family:Arial, sans-serif;margin:0;padding:0}.report-container{padding:4mm}table{width:100%;border-collapse:collapse}th,td{border:1px solid #ddd;padding:6px;text-align:right}footer{font-size:11px;margin-top:8px}</style></head><body><div class="report-container"><header><div style="float:left"><img src='{{LOGO_SRC}}' style='height:36px'/></div><div style='text-align:right'><strong>{{REPORT_TITLE}}</strong><div style='font-size:12px'>{{FROM_DATE}} — {{TO_DATE}}</div></div></header><main><!-- INSERT REPORT BODY HERE --></main><footer>تم الإنشاء {{GENERATED_AT}}</footer></div></body></html>
HTML
  echo "CREATED default public template" >> "$LOG"
fi

# 4. ensure schema exists
cat > client/public/templates/report_schema.json <<'JSON'
{
  "expenses": { "columns": ["expense_date","project_name","category","amount","worker_name"], "headers": ["التاريخ","المشروع","الفئة","المبلغ","العامل"] },
  "purchases": { "columns": ["purchase_date","project_name","supplier","item","qty","unit_price","total_price"], "headers": ["التاريخ","المشروع","المورد","الصنف","الكمية","سعر الوحدة","الإجمالي"] },
  "projects": { "columns": ["project_name","start_date","end_date","status"], "headers": ["المشروع","بداية","نهاية","الحالة"] }
}
JSON
echo "CREATED: client/public/templates/report_schema.json" >> "$LOG"

# 5. patch UnifiedReportRenderer if exists
UR_PATH="client/src/components/unified-reports/UnifiedReportRenderer.tsx"
if [ -f "$UR_PATH" ]; then
  cp "$UR_PATH" "$BACKUP_DIR/UnifiedReportRenderer.tsx.bak"
  cat > "$UR_PATH" <<'TSX'
// [AUTO-GENERATED] UnifiedReportRenderer.tsx - wrapper for unified template
import React, { useEffect, useState } from 'react';
type Props = { html?: string; title?: string; from?: string; to?: string; logoSrc?: string; children?: React.ReactNode; };
export default function UnifiedReportRenderer({ html, title='تقرير', from='', to='', logoSrc='', children }: Props) {
  const [template, setTemplate] = useState<string | null>(null);
  useEffect(() => {
    (async () => {
      try {
        const resp = await fetch('/templates/report_base.html');
        if (resp.ok) { setTemplate(await resp.text()); return; }
      } catch(e) {}
      setTemplate(`<div class="report-container"><header><div style="float:left"><img src="${logoSrc}" style="height:36px"/></div><div style="text-align:right"><strong>${title}</strong><div style="font-size:12px">${from} — ${to}</div></div></header><main><!-- CONTENT --></main><footer style="margin-top:8px;font-size:11px">تم الإنشاء ${new Date().toLocaleString('ar-EG')}</footer></div>`);
    })();
  }, [logoSrc,title,from,to]);
  if (html && template) {
    const filled = template.replace('<!-- INSERT REPORT BODY HERE -->',''+html).replace('{{REPORT_TITLE}}',title).replace('{{FROM_DATE}}',from).replace('{{TO_DATE}}',to).replace('{{GENERATED_AT}}',new Date().toLocaleString('ar-EG')).replace('{{LOGO_SRC}}',logoSrc);
    return <div dangerouslySetInnerHTML={{ __html: filled }} />;
  }
  return <div className="report-container"><header style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:8}}><div><img src={logoSrc} style={{height:36}}/></div><div style={{textAlign:'right'}}><div style={{fontWeight:700}}>{title}</div><div style={{fontSize:12}}>{from} — {to}</div></div></header><main>{children}</main><footer style={{marginTop:10,fontSize:11}}>تم الإنشاء — {new Date().toLocaleString('ar-EG')}</footer></div>;
}
TSX
  echo "PATCHED: $UR_PATH (backup saved)" >> "$LOG"
else
  echo "NOT FOUND: $UR_PATH" >> "$LOG"
fi

# 6. try to generate one PDF via puppeteer (if node and puppeteer installed)
if node -e "require('fs')" >/dev/null 2>&1; then
  NODE_SCRIPT="node_temp_pdf_test.js"
  cat > $NODE_SCRIPT <<'NODE'
const fs = require('fs');
(async ()=> {
  try {
    const puppeteer = require('puppeteer');
    const html = fs.readFileSync('client/public/templates/report_base.html','utf8').replace('<!-- INSERT REPORT BODY HERE -->','<h1>اختبار تقرير</h1><table><tr><th>عمود</th></tr><tr><td>قيمة</td></tr></table>');
    const browser = await puppeteer.launch({ args: ['--no-sandbox','--disable-setuid-sandbox'] });
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    await page.pdf({ path: 'reports_output/test_report.pdf', format: 'A4', margin: { top:'10mm', right:'8mm', bottom:'8mm', left:'8mm' }});
    await browser.close();
    console.log('PDF_GENERATED_OK');
  } catch(e) {
    console.error('PDF_GENERATION_FAILED', e.message);
    process.exit(2);
  }
})();
NODE
  if node $NODE_SCRIPT 2>/dev/null | grep -q 'PDF_GENERATED_OK'; then
    echo "PDF generation succeeded: reports_output/test_report.pdf" >> "$LOG"
  else
    echo "Puppeteer failed or not runnable. Will mark for external conversion." >> "$LOG"
    echo "ERROR: Puppeteer generation failed. Consider EXTERNAL_PDF_API_KEY usage." >> "$LOG"
  fi
  rm -f $NODE_SCRIPT
fi

# 7. commit & push
git add -A
if git commit -m "feat(reports): apply unified A4 template and patch renderer" >/dev/null 2>&1; then
  echo "Committed changes." >> "$LOG"
else
  echo "No changes to commit or commit failed." >> "$LOG"
fi

if git push origin $BRANCH >/dev/null 2>&1; then
  echo "Pushed branch to origin/$BRANCH" >> "$LOG"
else
  echo "Push failed: possibly due to permissions. Branch available locally." >> "$LOG"
fi

echo "Run finished at $(date)" >> "$LOG"
cat "$LOG"

خاتمة سريعة

الصق نص الوكالة (الجزء الكبير) في Replit Agent أولًا — هذا يشرح المطلوب بالكامل.

إن كان الوكيل يستطيع تنفيذ shell فاطلب منه حفظ السكريبت الثاني وتشغيله.

بعد الانتهاء أرسل لي: reports/unified-run.log + ناتج git branch --show-current + مسارات ملفات PDF/Excel الناتجة (أو روابطها). سأراجع اللوج فورًا وأعطيك قائمة مراجعة نهائية للتدقيق والإطلاق.


لو تحب أهيّئ لك نسخة مخصّصة من الأمر أعلاه بصيغة أقصر أو بالإنجليزية لنسخها مباشرة في Replit Agent UI — قل لي تفضّل أي صيغة.

